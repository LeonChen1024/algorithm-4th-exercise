package edu.princeton.cs.exercise.chapter1_4;

/**
 * 1.4.7 Analyze ThreeSum under a cost model that counts arithmetic operations (and comparisons)
 * involving the input numbers.
 *
 * <p>通过一个成本模型来分析 ThreeSum ,计算它的算术操作(并对比)并考虑输入数字
 *
 * @author LeonChen
 * @since 3/5/20
 */
class e01_04_07 {

  public static void main(String[] args) {}

  public static int count(int[] a) {
    int n = a.length;
    int count = 0;
    for (int i = 0; i < n; i++) { // loop n
      for (int j = i + 1;
          j < n;
          j++) { // loop (n-1) + (n-2) +... +0 = n(n-1)*1/2 = n^2/2 - n/2 ~ N^2
        for (int k = j + 1; k < n; k++) {
          // loop  当 i =0 的时候 .(n-2) + (n-3) + ... +0 = (n-1)(n-2)*1/2
          // loop 当 i =1 的时候.          (n-3) + (n-4) + ... +0 = (n-2)(n-3)*1/2
          // loop i = 2 时.                       (n-4) + ... +0 = (n-3)(n-4)*1/2

          // 其中这些每个等式都是等差数列,只不过是最大的值有差异.根据等差数列前N项和公式Sn=n(a1+an)/2 所以这些次数的和等与
          // (1^2 +1)/2 + (2^2 +2)/2 + ... + ((N-2)^2 +N-2)/2 可以转换为
          // S = ( (1^2 + 2^2 + 3^2 + 4^2 + ... +(N-2)^2) + (1+2+3+...+(N-2))  )/2

          // 根据公式  (1^2 + 2^2 + 3^2 + 4^2 + ... +N^2) =n(2n+1)(n+1)/6 得出
          // S = ( (N-2)(2(N-2)+1)(N-2+1)/6 + ((N-2)^2 +N-2)/2 )/2
          // S =(N-2)(N-1)N/6

          // (1^2 + 2^2 + 3^2 + 4^2 + ... +N^2) =n(2n+1)(n+1)/6 这个公式是这么推导来的
          // (n+1)^3 = n^3 +3n^2 +3n +1
          // 此时我们从(1+1)^3 计算到 (n+1)^3

          // 2^3 =1^3 +3*1^2 + 3*1 +1
          // 3^3 =2^3 +3*2^2 + 3*2 +1
          // ...
          // (n+1)^3 = n^3 +3n^2 +3n +1

          // 每一行都加起来,2^3 + 3^3+...(n+1)^3 = (1^3+2^3+...+n^3)+3(1^2+2^2+...+n^2) +3(1+2+...+n)+n
          // 左右重复项同时消去.

          // (n+1)^3 = 1^3 + 3(1^2+2^2+...+n^2)+3(1+2+...+n)+n
          // 出现了 1^2+2^2+...+n^2 , 将它作为变量解出方程即可.

          if (a[i] + a[j] + a[k] == 0) { // (N-2)(N-1)N/6
            count++;
          }
        }
      }
    }

    // 最多的高阶循环执行了 if (a[i] + a[j] + a[k] == 0) { 1次 if 比较,1次 a[j]+a[j] 1次 +a[k] 1次 对比 0
    // 总共是4次.所以总的次数为 4*(N-2)(N-1)N/6 ~ 4N^3/6 ~ N^3
    return count;
  }
}
